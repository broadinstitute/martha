# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

job_defaults: &job_defaults
  working_directory: ~/repo

run_env_setup: &run_env_setup
  run:
    name: Setup Environment Variables
    command: |
      echo 'export PATH="${PATH}:${HOME}/repo/git-secrets"' >> $BASH_ENV
run_secret_setup: &run_secret_setup
  run:
    name: Install git secrets and configure minnie-kenny.sh
    command: |
      git clone https://github.com/awslabs/git-secrets.git
      pushd git-secrets >/dev/null
      git checkout ad82d68ee924906a0401dfd48de5057731a9bc84
      popd >/dev/null
      ./minnie-kenny.sh -f

jobs:
  secrets:
    <<: *job_defaults
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - run:
          name: Check for git secrets
          command: git secrets --scan-history

  lint:
    <<: *job_defaults
    docker:
      - image: circleci/node:12.16.1

    steps:
      - checkout
      - run:
          name: Run ESLint
          command: |
            npm install
            npm run lint

  test:
    <<: *job_defaults
    docker:
      - image: circleci/node:12.16.1

    steps:
      - checkout
      - <<: *run_env_setup
      - <<: *run_secret_setup
      - run:
          name: Setup npm
          command: |
            npm ci
            sudo npm install -g codecov
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Upload codecov
          command: |
            npm run report-coverage
            codecov

  tag:
    <<: *job_defaults
    docker:
      - image: alpine/git

    steps:
      - add_ssh_keys:
          fingerprints:
            - "29:14:13:da:54:92:5d:7d:50:26:a2:96:40:fd:a9:ed"
      - checkout
      - run:
          when: on_success
          command: |
            echo 'export TAG_NAME=dev_tests_passed_$(date +%s)' >> $BASH_ENV
            source $BASH_ENV
            git tag $TAG_NAME
            git push origin $TAG_NAME

  build-image:
    <<: *job_defaults
    docker:
      - image: google/cloud-sdk

    environment:
      GCR_REGISTRY: broad-dsp-gcr-public
      # Martha will be pushed to GCR as a public image since it was public in Quay as well
      IMAGE_NAME: us.gcr.io/broad-dsp-gcr-public/martha

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Build image
          command: |
            docker build -t ${IMAGE_NAME}:${CIRCLE_BRANCH} -f docker/Dockerfile .
            if [[ ${CIRCLE_BRANCH} == "dev" ]]; then docker tag ${IMAGE_NAME}:${CIRCLE_BRANCH} ${IMAGE_NAME}:latest ; fi

      - run:
          name: Install trivy
          command: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
  
      - run:
          name: Scan the local image with trivy (light)
          command:  |
            if [[ ${CIRCLE_BRANCH} == "dev" ]]; then 
            trivy --exit-code 1 --severity CRITICAL --no-progress ${IMAGE_NAME}:latest
            else 
            trivy --exit-code 1 --severity CRITICAL --no-progress ${IMAGE_NAME}:${CIRCLE_BRANCH} 
            fi 

      - run:
          name: Push to quay
          command: |
            apt-get install -y jq
            # Get the credentials used to push to GCR out of Vault and put key into file
            docker run \
                --rm \
                --env "VAULT_TOKEN=${SSHAH_TEMP_VAULT_TOKEN}" \
                broadinstitute/dsde-toolbox \
                vault read \
                --format=json "secret/dsde/dsp-techops/common/dspci-wb-gcr-service-account.json" |
            jq .data > ${HOME}/gcr_auth_key_file.json
            gcloud auth activate-service-account --key-file ${HOME}/gcr_auth_key_file.json
            # Register `gcloud` as a Docker credential helper. Add `-q` to silence confirmation prompts
            gcloud auth configure-docker ${GCR_REGISTRY} -q
            docker push ${IMAGE_NAME}

workflows:
  version: 2
  test-and-tag:
    jobs:
      - secrets
      - lint
      - test:
          requires:
            - secrets
      - build-image:
          requires:
            - secrets
      - tag:
          requires:
            - lint
            - test
            - build-image
          filters:
            branches:
              only: dev
